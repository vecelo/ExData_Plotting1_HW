system.time(4)
system.time(5)
system.time()
}
}
}
trace
list.files()
# helper function for getting the hospital name
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
source("submitscript3.R")
submit()
submit()
submit()
submit()
submit()
}
rankhospital <- function(state, outcome, num = "best") {
:
}
}
scource("submitscript3.R")
scoure("submitscript3.R")
source("submitscript3.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
rm(list=ls())
swirl
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
install_from_swirl("Data Analysis")
swirl()
getwd()
0
exit)
exit()
q()
0
info()
bye()
swirl()
library(swirl)
swirl()
bye()
rm(list=ls())
x <- c(1,2,3)
y <- c(1,3,5)
cbin(x,y)
cbind(x,y)
class(cbind(x,y))
x <- 1:4
y <- 2:3
x + y
rm(list=ls())
files <- (Sys.glob("D:/git/R/specdata//*.csv"))[id];
combined_data <- c()
for (file in files) {
file_data <- read.csv(file, sep = ",");
pollutant_data <- file_data[,pollutant];
pollutant_data <- pollutant_data[!is.na(pollutant_data)]
combined_data <- c(combined_data, pollutant_data)
}
return(mean(combined_data));
}
files <- (Sys.glob("D:/git/R/specdata/*.csv"))[id];
files <- (Sys.glob("D:/git/R/specdata/*.csv"));
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
files <- (Sys.glob("D:/git/R/specdata/*.csv"));
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
rm(ls=list())
rm(list=ls())
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
rm(ls=list())
rm(list=ls())
gwd
gwd()
pwd()
getwd()
# Source of data for this project: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# This R script does the following:
# 1. Merges the training and the test sets to create one data set.
tmp1 <- read.table("train/X_train.txt")
tmp1 <- read.table("../train/X_train.txt")
normalizePath() #Converts file paths to canonical user-understandable form
normalizePath()
?normalizePath
a <- c(D:\git\R\getdata-projectfiles-UCI HAR Dataset\UCI HAR Dataset)
a <- c("D:\git\R\getdata-projectfiles-UCI HAR Dataset\UCI HAR Dataset")
a <- c("D:/git/R/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
a <- c("D:/git/R/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/")
normalizePath(a, winslash = "\\", mustWork = NA)
normalizePath(a, winslash = "\", mustWork = NA)
;
sg+a
s<a
a>c
oe
quit
quit()
a = b?
?
.
>
c <
getwd()
rm(ls=list())
rm(list=ls9)
rm(list=ls())
# Source of data for this project: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# This R script does the following:
# 1. Merges the training and the test sets to create one data set.
tmp1 <- read.table("./getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/train/X_train.txt")
tmp2 <- read.table("./getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/test/X_test.txt")
X <- rbind(tmp1, tmp2)
tmp1 <- read.table("./getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/train/subject_train.txt")
tmp2 <- read.table("./getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/test/subject_test.txt")
S <- rbind(tmp1, tmp2)
tmp1 <- read.table("./getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/train/y_train.txt")
tmp2 <- read.table("./getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/test/y_test.txt")
Y <- rbind(tmp1, tmp2)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("./getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/features.txt")
indices_of_good_features <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
X <- X[, indices_of_good_features]
names(X) <- features[indices_of_good_features, 2]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
# 3. Uses descriptive activity names to name the activities in the data set.
activities <- read.table("./getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/activity_labels.txt")
activities[, 2] = gsub("_", "", tolower(as.character(activities[, 2])))
Y[,1] = activities[Y[,1], 2]
names(Y) <- "activity"
# 4. Appropriately labels the data set with descriptive activity names.
names(S) <- "subject"
cleaned <- cbind(S, Y, X)
write.table(cleaned, "merged_clean_data.txt")
# 5. Creates a 2nd, independent tidy data set with the average of each variable for each activity and each subject.
uniqueSubjects = unique(S)[,1]
numSubjects = length(unique(S)[,1])
numActivities = length(activities[,1])
numCols = dim(cleaned)[2]
result = cleaned[1:(numSubjects*numActivities), ]
row = 1
for (s in 1:numSubjects) {
for (a in 1:numActivities) {
result[row, 1] = uniqueSubjects[s]
result[row, 2] = activities[a, 2]
tmp <- cleaned[cleaned$subject==s & cleaned$activity==activities[a, 2], ]
result[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(result, "data_set_with_the_averages.txt")
rm(list=ls())
source('D:/git/R/run_analysis.R')
rm(list=ls())
source('D:/git/R/getdata/run_analysis.R')
source('D:/git/R/getdata/run_analysis.R')
rm(list=ls())
source('D:/git/R/getdata/run_analysis.R')
rm(ls=list())
rm(list=ls())
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(package)
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 50)
head(top_counts, 20)
?arrange
arrange(top_counts,desc(count))
arrange(top_counts,desc(count))
top_counts$53
top_counts[53]
top_counts(53)
top_counts
head(top_counts, 53)
head(top_counts, 20)
head(top_counts, 50)
which(top_counts)
select(top_counts,count,)
select(top_counts,count)
select(top_counts,package)
select(top_counts,package,count)
top_counts[r,]
top_counts[53,]
top_counts[43,]
top_counts[2,]
top_counts
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum$unique > 465)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique,desc(uin))
arrange(top_unique,desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
select(cran, ip_id, country, package)
submit()
submit()
submit()
submit()
submit()
rm(list=ls())
swirl()
swirl()
swirl()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, key, value)
res <- gather(students2, key, value, -grade)
res
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
reset()
submit()
reset()
submit()
reset()
submit()
View(students3)
View(res)
View(sat)
submit()
submit()
View(students3)
submit()
submit()
reset()
submit
submit()
extract_numeric("class5")
submit()
View(students4)
View(students3)
# with mutate() by assigning a new value to the existing
View(students3)
submit()
View(students3)
submit()
View(students3)
?extract_numeric
submit()
View(students3)
?mutate
?mutate
library(dplyr)
?mutate
?mutate
submit()
library("dplyr")
submit()
submit()
submit()
students4
submit()
?unique
submit()
submit()
unique(student_info, sex)
View(students4)
unique(student_info, id)
unique(student_info, name)
submit()
submit()
submit()
unique(student_info, name)
submit()
submit()
submit()
submit()
View(student_info)
library(swirl)
swirl()
submit()
View(student_info)
submit()
sumbit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
passed
failed <- failed %>% mutate(status = "failed")
rbind_list(passed, failed)
sat
?contains
?selection
?select
reset()
?gather
?separate
submit()
submit()
submit()
submit()
submit()
submit()
?mutate
submit()
sys.getlocal("LC_TIME")
Sys.getlocal("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
quit()
library(swirl)
ls
rm(ls=list())
rm(list=ls())
getwd()
find.package("plot")
find.package("plotting")
library(ggplot2)
find.package("ggplot2")
data_full <- read.csv("D:/git/R/ExData_Plotting1_HW/Data/household_power_consumption.txt", header=T, sep=';', na.strings="?",
?2
?>
getwd()
cd D:/git/R/ExData_plotting1_HW
setwd("D:/git/R/ExData_plotting1_HW")
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
nrows=2075259 check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
nrows="2075259", check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
?read.csv
nrows='2075259', check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full <- read.csv("D:/git/R/ExData_Plotting1_HW/Data/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
datetime <- paste(as.Date(data$Date), data$Time)
## Getting full dataset
data_full <- read.csv("D:/git/R/ExData_Plotting1_HW/Data/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 1
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Orange")
## Saving to file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
## Getting full dataset
data_full <- read.csv("D:/git/R/ExData_Plotting1_HW/Data/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 2
plot(data$Global_active_power~data$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
## Getting full dataset
data_full <- read.csv("D:/git/R/ExData_Plotting1_HW/Data/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 3
with(data, {
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='orange')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "orange", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
## Getting full dataset
data_full <- read.csv("D:/git/R/ExData_Plotting1_HW/Data/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 4
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='orange')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "orange", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
## Saving to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
